// -----------------------------------------------------------------------------
// This file contains very basic styles.
// -----------------------------------------------------------------------------

/**
 * Set up a decent box model on the root element
 */
html {
  box-sizing: border-box;
}

/**
 * Make all elements from the DOM inherit from the parent box-sizing
 * Since `*` has a specificity of 0, it does not override the `html` value
 * making all elements inheriting from the root box-sizing value
 * See: https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/
 */
*,
*::before,
*::after {
  box-sizing: inherit;
}

/**
 * Basic styles for links
 */
 
a {
  $color: map-get($theme-colors, "primary");
  color: $color;
  text-decoration: none;
  @include on-event {
    color: darken($color, 10%);
    
    list-style-type: none;
    text-decoration: none;
  }
}


// https://geekyants.com/blog/building-your-own-css-framework-373
.container{        
  padding: 0 0.5rem;
  display: flex;
  flex-direction: column;
  width: 100%;
  margin: 0px auto;
  &:not(.fluid){
    max-width: $max-width;
  }
}

.row{
  padding: 0.5rem 0;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  width: 100%;  
}

@each $breakpoint,$value in $breakpoints {
  // MEDIA QUERY
  @media only screen and (min-width: $value) {
      // RESPONSIVE COLUMN CODE .....
      @for $i from 1 through $no-of-columns {
          .col-#{$breakpoint}-#{$i} {
              width: (100% / ($no-of-columns / $i));
              padding: 0 0.5rem;
          }
      }
  }
}

// RESPONSIVE COLUMN CODE .....
@for $i from 1 through $no-of-columns {
    .col-#{$i} {
        width: (100% /  ( $no-of-columns / $i))  ;  
        padding: 0 0.5rem;
    }
}


pre{
  border: 2px solid map-get($theme-colors, "primary");
  width: 100%;
  padding: 1em;
}